@mixin square($size)
{
    width: $size;
    height: $size;
}
  
@mixin center-block
{
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}
  
@mixin text-overflow
{
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}
  
@mixin transition($property, $duration: 0.3s, $ease: ease-in-out)
{
    -webkit-transition: $property $duration $ease;
    -moz-transition: $property $duration $ease;
    -ms-transition: $property $duration $ease;
    -o-transition: $property $duration $ease;
    transition: $property $duration $ease;
}
  
@mixin box-shadowing($color, $distance, $spread, $blur)
{
    -webkit-box-shadow: $color $distance $spread $blur;
    -moz-box-shadow: $color $distance $spread $blur;
    box-shadow: $color $distance $spread $blur;
}
  
@mixin border-radius($radius)
{
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    border-radius: $radius;
}
  
@mixin background-image($url, $repeat)
{
    background-image: url($url);
    background-repeat: $repeat;
}
  
@mixin responsive($breakpoints, $properties)
{
    @media (min-width: $breakpoints)
    {
      #{$properties}
      {
      //  implement properties
      }
    }
}
  
@mixin size($width, $height)
{
    width: $width;
    height: $height;
}
  
@mixin gradient($begin-color, $end-color, $direction)
{
    background: $begin-color;
    background: -webkit-linear-gradient($direction, $begin-color, $end-color);
    background: -o-linear-gradient($direction, $begin-color, $end-color);
    background: -moz-linear-gradient($direction, $begin-color, $end-color);
    background: linear-gradient($direction, $begin-color, $end-color);
}
  
@mixin tile-grid($rows, $cols, $gutter: 10px)
{
    $total: $rows * $cols;
    width: 100% / $cols - #{$gutter} * ($cols - 1);
    height: 100% / $rows - #{$gutter} * ($rows - 1);
  
    @for $i from 12 through $total
    {
        &:nth-child(#{$rows}n + #{$i})
        {
            grid-row: ($i - 1) / $cols + 1;
            grid-column: ($i - 1) % $cols + 1;
        }
    }
}
  
@mixin stripped-border($color, $width: 5px, $height: 5px)
{
    @for $i from 1 through 100
    {
        &:before
        {
            content: "";
            position: absolute;
            top: $i * $height;
            left: 0;
            width: 100%;
            height: $width;
            background-color: $color;
        }
    }
}
  
@mixin color-transition($duration: .5s, $colors...)
{
    $color-count: length($colors);
    $color-duration: $duration / $color-count;
  
    @for $i from 1 through $color-count
    {
        &:nth-child(#{$color-count}n + #{$i})
        {
            transition: background-color $duration;
            background-color: nth($colors, $i);
  
            @if $i > 1
            {
                &:hover
                {
                    background-color: nth($colors, $i - 1);
                    transition-delay: -$color-duration;
                }
            }
        }
    }
}

@mixin arrow($size, $direction, $color, $height, $width)
{  
    $sqrt2: 1.41421356;
    $unit: $size / $sqrt2;
    $half: $size / 2;
    $property: null;
    $property_before: null;
    $property_after: null;
  
    @if $direction == "up"
    {
        $property: 'border-bottom';
        $property_before: 'border-left';
        $property_after: 'border-right';
        $height: 0;
        $width: $half;
    }
  
    @else if $direction == "down"
    {
        $property: 'border-top';
        $property_before: 'border-left';
        $property_after: 'border-right';
        $height : 0;
        $width: $half;
    }
  
    @else if $direction == "left"
    {
        $property: 'border-right';
        $property_before: 'border-top';
        $property_after: 'border-bottom';
        $height: $half;
        $width: 0;
    }
  
    @else if $direction == "right"
    {
        $property: 'border-left';
        $property_before: 'border-top';
        $property_after: 'border-bottom';
        $height: $half;
        $width: 0;
    }
  
    #{$property}: $size solid $color;
    #{$property_before}: $unit solid transparent;
    #{$property_after}: $unit solid transparent;
  
    height: $height;
    width: $width;
  
}